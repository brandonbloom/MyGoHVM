Input:

(Left (Pair x y))

Output:

x


Input:

(let {x 1} x)

Output:

1


Input:

(op2 Add 2 3)

Output:

5


Input:

#dup[2 x y 1 (op2 Add x y)]

Output:

2


Input:

((lam x x) 1)

Output:

1


Input:

(Pair 1 2)

Output:

(Pair 1 2)


Input:

(let {x 1} (erase x (let {x#1 2} x#1)))

Output:

2


Input:

#dup[3 x0 x1 (Pair 1 2) #dup[3 x00 x01 x0 #dup[3 x10 x11 x1 (Quad (Left x00) (Right x01) (Left x10) (Right x11))]]]

Output:

(Quad 1 2 1 2)


Input:

(let {x 1} (erase x 2))

Output:

2


Input:

#dup[4 f1 f2 (lam x (op2 Add x 1)) (Pair f1 f2)]

Output:

(Pair (lam arg0 (op2 Add arg0 1)) (lam arg1 (op2 Add arg1 1)))


Input:

#dup[5 f1 f2 (lam x (erase x 1)) (Pair (f1 2) (f2 3))]

Output:

(Pair 1 1)


Input:

#sup[6 1 2]

Output:

#sup[6 1 2]


Input:

#dup[7 a b #sup[7 1 2] (Pair a b)]

Output:

(Pair 1 2)


Input:

#dup[8 f1 f2 (lam x (op2 Add x 1)) (Pair (f1 2) (f2 3))]

Output:

(Pair 3 4)


Input:

(Map (lam x x) Nil)

Output:

Nil


Input:

(let {list (Cons 1 (Cons 2 Nil)), inc (lam x (op2 Add x 1))} (Map inc list))

Output:

(Cons 2 (Cons 3 Nil))
